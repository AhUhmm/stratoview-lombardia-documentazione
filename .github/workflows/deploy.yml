name: Deploy Stratoview Documentation to GitHub Pages

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job with Markdown to HTML conversion and auto-sync
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g marked highlight.js
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Prepare docs directory
        run: |
          # Create docs directory structure
          mkdir -p docs/architecture
          mkdir -p docs/implementation
          mkdir -p docs/mockup
          mkdir -p docs/taxonomy

      - name: Copy static files
        run: |
          # Copy index.html to docs
          if [ -f "index.html" ]; then
            cp index.html docs/
            echo "Copied index.html to docs/"
          elif [ -f "docs/index.html" ]; then
            echo "Index.html already in docs/"
          fi

          # Copy mockup files
          if [ -d "mockup" ]; then
            cp -r mockup/* docs/mockup/
            echo "Copied mockup files"
          fi

          # Copy taxonomy files
          if [ -d "taxonomy" ]; then
            cp -r taxonomy/* docs/taxonomy/
            echo "Copied taxonomy files"
          fi

          # Copy any assets
          if [ -d "assets" ]; then
            mkdir -p docs/assets
            cp -r assets/* docs/assets/
            echo "Copied asset files"
          fi

      - name: Extract version and auto-sync index
        run: |
          # Extract current version from complete-architecture.md
          if [ -f "architecture/complete-architecture.md" ] && [ -f "docs/index.html" ]; then
            # Look for latest version in format "### v5.1 (2025-06-23)"
            LATEST_VERSION=$(grep -E "^### v[0-9]+\.[0-9]+" architecture/complete-architecture.md | head -1 | sed -E 's/^### (v[0-9]+\.[0-9]+).*/\1/')
            VERSION_DATE=$(grep -E "^### v[0-9]+\.[0-9]+" architecture/complete-architecture.md | head -1 | sed -E 's/.*\(([0-9]{4}-[0-9]{2}-[0-9]{2})\).*/\1/')
            
            echo "Extracted version: $LATEST_VERSION"
            echo "Version date: $VERSION_DATE"
            
            if [ ! -z "$LATEST_VERSION" ]; then
              # Update version badge
              sed -i "s/<div class=\"version-badge\">[^<]*<\/div>/<div class=\"version-badge\">$LATEST_VERSION - Current<\/div>/g" docs/index.html
              
              # Update architecture version
              sed -i "s/<p><strong>Architecture Version:<\/strong>[^<]*<\/p>/<p><strong>Architecture Version:<\/strong> $LATEST_VERSION Complete with Latest Updates<\/p>/g" docs/index.html
              
              # Update last updated date if available
              if [ ! -z "$VERSION_DATE" ]; then
                # Convert date format from YYYY-MM-DD to "Month DD, YYYY"
                FORMATTED_DATE=$(date -d "$VERSION_DATE" "+%B %d, %Y" 2>/dev/null || echo "$VERSION_DATE")
                sed -i "s/<p><strong>Last Updated:<\/strong>[^<]*<\/p>/<p><strong>Last Updated:<\/strong> $FORMATTED_DATE<\/p>/g" docs/index.html
              fi
              
              echo "✅ Index.html auto-synced with architecture version $LATEST_VERSION"
            else
              echo "⚠️ No version found in architecture document - manual sync required"
            fi
          else
            echo "⚠️ Architecture document or index.html missing - skipping auto-sync"
          fi

      - name: Convert Markdown to HTML
        run: |
          # Convert complete architecture
          if [ -f "architecture/complete-architecture.md" ]; then
            pandoc "architecture/complete-architecture.md" \
              -o docs/architecture/complete-architecture.html \
              --standalone \
              --template=.github/templates/doc-template.html \
              --css=../assets/css/documentation.css \
              --metadata title="Complete Architecture Documentation"
            echo "✅ Converted complete-architecture.md"
          fi

          # Convert user roles documentation
          if [ -f "architecture/user-roles-documentation.md" ]; then
            pandoc "architecture/user-roles-documentation.md" \
              -o docs/architecture/user-roles-documentation.html \
              --standalone \
              --template=.github/templates/doc-template.html \
              --css=../assets/css/documentation.css \
              --metadata title="User Roles & Permissions"
            echo "✅ Converted user-roles-documentation.md"
          fi

          # Convert validation requirements
          if [ -f "validation/validation-requirements.md" ]; then
            pandoc "validation/validation-requirements.md" \
              -o docs/taxonomy/validation-requirements.html \
              --standalone \
              --template=.github/templates/doc-template.html \
              --css=../assets/css/documentation.css \
              --metadata title="Form Validation Requirements"
            echo "✅ Converted validation-requirements.md"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: "./docs"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
